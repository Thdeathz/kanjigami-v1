generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id             String          @id @default(uuid())
  avatarUrl      String?
  username       String          @unique
  rankingScore   Int             @default(0)
  roles          Role[]          @default([USER])
  account        Account?        // relation to Account
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  resetPasswords ResetPassword[] // relation to ResetPassword
  gameLogs       GameLog[]       // relation to GameLog
  likedStacks    Stack[]         // relation to Stack
  onlineHistory  OnlineHistory[] // relation to OnlineHistory
  joinedEvents   Event[]         // relation to Event
}

model ResetPassword {
  token     String   @unique
  expries   DateTime
  verified  Boolean  @default(false)
  isActive  Boolean  @default(true)
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @id  // relation scalar feild
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id           String   @id @default(uuid())
  email        String   @unique
  password     String
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @unique // relation scalar feild
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Stack {
  id          String      @id @default(uuid())
  name        String
  description String
  topic       Topic       @relation(fields: [topicId], references: [id])
  topicId     String      // relation scalar feild
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  kanjis      Kanji[]     // relation to Kanji
  gameStacks  GameStack[] // relation to GameStack
  rounds      Round[]     // relation to Round
  likedBy     User[]      // relation to User
}

model Topic {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  stacks      Stack[]  // relation to Stack
}

model Kanji {
  id           String       @id @default(uuid())
  kanji        String
  kunyomi      String
  onyomi       String
  meaning      String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  stack        Stack[]      // relation to Stack
  vocabularies Vocabulary[] // relation to Vocabulary
  images       Image[]      // relation to Image
}

model Image {
  id        String   @id @default(uuid())
  url       String
  kanji     Kanji    @relation(fields: [kanjiId], references: [id])
  kanjiId   String   // relation scalar feild
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vocabulary {
  id          String    @id @default(uuid())
  yomikata    String
  meaning     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  kanjis      Kanji[]   // relation to Kanji
  examples    Example[] // relation to Example
}

model Example {
  id        String     @id @default(uuid())
  example   String
  meaning   String
  vocab     Vocabulary @relation(fields: [vocabId], references: [id])
  vocabId   String     // relation scalar feild
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model GameLog {
  archievedPoints Int
  gameStack       GameStack @relation(fields: [gameStackId], references: [id])
  gameStackId     String    // relation scalar feild
  user            User      @relation(fields: [userId], references: [id])
  userId          String    // relation scalar feild
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  @@id([gameStackId, userId])
}

model GameStack {
  id        String    @id @default(uuid())
  game      Game      @relation(fields: [gameId], references: [id])
  gameId    String    // relation scalar feild
  stack     Stack     @relation(fields: [stackId], references: [id])
  stackId   String    // relation scalar feild
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  gameLogs  GameLog[] // relation to GameLog
}

model Game {
  id         String      @id @default(uuid())
  name       String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  gameStacks GameStack[] // relation to GameStack
  rounds     Round[]     // relation to Round
}

model Event {
  id          String   @id @default(uuid())
  startTime   DateTime
  maxPlayers  Int
  lobbyTime   Int
  status      String
  description String
  tags        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  rounds      Round[]  // relation to Round
  joinedUsers User[]   // relation to User
}

model Round {
  id            String          @id @default(uuid())
  event         Event           @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId       String          // relation scalar feild
  game          Game            @relation(fields: [gameId], references: [id])
  gameId        String          // relation scalar feild
  stack         Stack           @relation(fields: [stackId], references: [id])
  stackId       String          // relation scalar feild
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  onlineHistory OnlineHistory[] // relation to OnlineHistory
}

model OnlineHistory {
  user            User     @relation(fields: [userId], references: [id])
  userId          String   // relation scalar feild
  round           Round    @relation(fields: [roundId], references: [id], onDelete: Cascade)
  roundId         String   // relation scalar feild
  archievedPoints Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  @@id([userId, roundId])
}
